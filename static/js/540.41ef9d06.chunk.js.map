{"version":3,"file":"static/js/540.41ef9d06.chunk.js","mappings":"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","sources":["Services/api.js","components/Reusable Components/Loader/Loader.jsx","components/StyledNavLink/StyledNavLink.js","Services/timeFormater.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c86633d198b2023a18dd77350f0e9072';\n\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(\n    `${BASE_URL}trending/all/week?api_key=${API_KEY}`\n  );\n  return response.data.results;\n}\n\nexport async function fetchUpcomingMovies() {\n  const response = await axios.get(\n    `${BASE_URL}/movie/upcoming/?api_key=${API_KEY}`\n  );\n  return response.data.results;\n}\n\nexport async function fetchTopRatedMovies() {\n  const response = await axios.get(\n    `${BASE_URL}/movie/top_rated/?api_key=${API_KEY}`\n  );\n  return response.data.results;\n}\n\nexport async function fetchMoviebyId(movieId) {\n  const trendingMovies = await fetchTrendingMovies();\n  return trendingMovies.find(movie => movie.id === movieId);\n}\n\nexport async function fetchConfig() {\n  const response = await axios.get(\n    `${BASE_URL}configuration?api_key=${API_KEY}`\n  );\n  return response.data.images;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const response = await axios.get(`${BASE_URL}movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      append_to_response: 'credits,reviews,videos',\n    },\n  });\n\n  return response.data;\n}\n\nexport async function fetchMovieByQuery(query) {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: query,\n    },\n  });\n\n  return response.data.results;\n}\n","import { FidgetSpinner } from 'react-loader-spinner';\nimport { Box } from 'components/Reusable Components/Box';\nimport { Text } from 'components/Reviews/Reviews.styled';\n\nconst Loader = () => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <Text>Loading . . .</Text>\n      <FidgetSpinner backgroundColor=\"green\" />\n    </Box>\n  );\n};\n\nexport default Loader;\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledNavLink = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  margin-bottom: ${p => p.theme.space[5]}px;\n  color: ${p => p.theme.colors.accentText};\n  :hover {\n    font-size: 28px;\n  }\n\n  /* &.active {\n    background-color: ${p => p.theme.colors.active};\n    color: ${p => p.theme.colors.accentText};\n  } */\n`;\n","export function toHoursAndMinutes(totalMinutes) {\n  const minutes = totalMinutes % 60;\n  const hours = Math.floor(totalMinutes / 60);\n\n  return `${padTo2Digits(hours)}:${padTo2Digits(minutes)}`;\n}\n\nfunction padTo2Digits(num) {\n  return num.toString().padStart(2, '0');\n}\n","import { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { fetchConfig, fetchMovieDetails } from 'Services/api';\nimport { useState, useEffect } from 'react';\nimport { Box } from 'components/Reusable Components/Box';\nimport Loader from 'components/Reusable Components/Loader';\nimport { StyledNavLink } from 'components/StyledNavLink/StyledNavLink';\nimport {\n  BackIcon,\n  Text,\n  Wrapper,\n  Geners,\n  Heading,\n  StyledLink,\n} from './MovieDetails.styled';\nimport { toHoursAndMinutes } from 'Services/timeFormater';\n\nfunction MovieDetails() {\n  const [movieDetails, setMovieDetails] = useState(null);\n  console.log('movieDetails', movieDetails);\n  const [loading, setLoading] = useState(false);\n  const [config, setConfig] = useState(null);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/trending';\n\n  useEffect(() => {\n    setLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const movieDetails = await fetchMovieDetails(movieId);\n        setMovieDetails(movieDetails);\n        setLoading(false);\n      } catch (error) {\n        console.warn(error);\n        setMovieDetails('error');\n      }\n\n      try {\n        const config = await fetchConfig();\n        setConfig(config);\n      } catch (error) {\n        console.warn(error);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  if (!movieDetails || !config) {\n    return null;\n  }\n\n  if (movieDetails === 'error') {\n    return (\n      <Box pl=\"16px\">\n        <StyledNavLink to={backLinkHref}>\n          <BackIcon></BackIcon>\n          Back to Movies\n        </StyledNavLink>\n        <Text>\n          Ooops... The page you are looking for might have been removed or\n          temporarily unavailable\n        </Text>\n      </Box>\n    );\n  }\n\n  const { title, overview, genres, videos, release_date, runtime, imdb_id } =\n    movieDetails;\n\n  const findTrailer = () => {\n    const trailer = videos.results.find(video =>\n      video.name.toLowerCase().includes('trailer')\n    );\n\n    const URL = `http://www.youtube.com/embed/${trailer?.key}`;\n\n    console.log('URL', URL);\n    return URL;\n  };\n\n  return (\n    <Box pl=\"16px\" pr=\"16px\" pt=\"32px\">\n      {loading && <Loader></Loader>}\n      <StyledNavLink to={backLinkHref}>\n        <BackIcon></BackIcon>\n        Back to Movies\n      </StyledNavLink>\n      <Box>\n        <Wrapper>\n          <iframe\n            title={title}\n            id=\"ytplayer\"\n            src={findTrailer()}\n            frameBorder=\"0\"\n            allowFullScreen\n            allow=\"autoplay; encrypted-media\"\n          ></iframe>\n        </Wrapper>\n        <Text>\n          {`${title} • ${release_date.slice(0, 4)} • ${toHoursAndMinutes(\n            runtime\n          )}`}{' '}\n          •<a href={`https://www.imdb.com/title/${imdb_id}/`}> IMDb</a>\n        </Text>\n        <Geners>\n          {genres.map(genr => (\n            <span>{genr.name}</span>\n          ))}\n        </Geners>\n        <Heading>Overview</Heading>\n        <Text>{overview}</Text>\n      </Box>\n      <StyledLink to=\"cast\">Cast</StyledLink>\n      <StyledLink to=\"reviews\">Reviews</StyledLink>\n      <Outlet context={[movieDetails, config]} />\n    </Box>\n  );\n}\n\nexport default MovieDetails;\n"],"names":["BASE_URL","API_KEY","fetchTrendingMovies","axios","response","data","results","fetchUpcomingMovies","fetchTopRatedMovies","fetchConfig","images","fetchMovieDetails","movieId","params","api_key","language","append_to_response","fetchMovieByQuery","query","Box","display","alignItems","justifyContent","backgroundColor","StyledNavLink","styled","NavLink","p","theme","space","colors","accentText","active","toHoursAndMinutes","totalMinutes","minutes","hours","Math","floor","padTo2Digits","num","toString","padStart","useState","movieDetails","setMovieDetails","console","log","loading","setLoading","config","setConfig","useParams","backLinkHref","useLocation","state","from","useEffect","fetchData","warn","pl","to","title","overview","genres","videos","release_date","runtime","imdb_id","pr","pt","Loader","id","src","trailer","find","video","name","toLowerCase","includes","URL","key","findTrailer","frameBorder","allowFullScreen","allow","slice","href","map","genr","context"],"sourceRoot":""}